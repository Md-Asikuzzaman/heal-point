generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// User related models
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  password      String?
  role          Role      @default(user)
  emailVerified DateTime? @map("email_verified")
  image         String?

  accounts Account[]
  sessions Session[]

  @@map("users")
}

enum Role {
  user
  admin
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Product related models
model Product {
  id               String @id @default(auto()) @map("_id") @db.ObjectId
  title            String
  price            Float
  image            String
  brand            String
  medicineType     String
  medicineQuantity String
  rating           Float
  description      String

  @@map("products")
}

// Order related models

model Order {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  fullName  String
  phone     String
  address   String
  city      String
  zipCode   String
  createdAt DateTime    @default(now())
  items     OrderItem[]

  @@map("orders")
}

model OrderItem {
  id               String @id @default(auto()) @map("_id") @db.ObjectId
  productId        String
  title            String
  image            String
  quantity         Int
  price            Float
  brand            String
  medicineType     String
  medicineQuantity String

  orderId String @db.ObjectId
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("order_items")
}
